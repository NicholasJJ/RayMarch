// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#pragma kernel colDetect

#define MAX_STEPS 100
#define MAX_DIST 100
#define SURF_DIST 1e-3
#define MAX_OBJS 10
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

struct Ray {
    float3 ro;
    float3 rd;
};

struct Object {
    float3 pos;
    int type;
    float4 color;
    float4 dim;
    int combType;

    float4 r0;
    float4 r1;
    float4 r2;
    float4 r3;
};

struct Collider {
    float3 pos;
    int hit;
    float3 norm;
};

struct Mirror {
    float3 pos;
    float3 norm;
    float3 up;
    float3 right;
};

RWStructuredBuffer<Object> objs;
RWStructuredBuffer<Collider> bounds;
RWStructuredBuffer<Object> vampireObjs; //Because they don't have a reflection! ba dum tsss
float3 _lightDir;
RWStructuredBuffer<Mirror> mirrors;
bool _useMirrors;
int _mirrorDepth;
bool mirrorsArePortals;

Ray CreateRay(float3 origin, float3 direction) {
    Ray ray;
    ray.ro = origin;
    ray.rd = direction;
    return ray;
}

Ray CreateCameraRay(float2 uv) {
    float3 origin = mul(_CameraToWorld, float4(0, 0, 0, 1)).xyz;
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0, 1)).xyz;
    direction = mul(_CameraToWorld, float4(direction, 0)).xyz;
    direction = normalize(direction);
    return CreateRay(origin, direction);
}

float pMod(float p, float size)
{
    float halfsize = size * 0.5;
    float c = floor((p + halfsize) / size);
    p = fmod(p + halfsize, size) - halfsize;
    p = fmod(p - halfsize, size) + halfsize;
    //p = fmod(p, size);
    return p;
}

//float3 planefold(float3 p, float3 n, float d) {
//    return p - (2 * min(0, dot(p, n) - d) * n);
//}

float3x3 portalToWorld(Mirror m) {
    float3x3 ret = { m.right.x, m.up.x, m.norm.x,
                    m.right.y, m.up.y, m.norm.y,
                    m.right.z, m.up.z, m.norm.z };
    return ret;
}

float3 portalFold(float3 p, float3 portalInPos, float3 portalOutPos, float3x3 worldToPortalIn, float3x3 portalOutToWorld) {
    float3 np = p - portalInPos;
    np = mul(np, worldToPortalIn);
    if (np.z > 0) return p;
    np = mul(np, portalOutToWorld);
    np.x = -np.x;
    np.z = -np.z;
    np += portalOutPos;
    return np;
}

float3 inPortalSpace(float3 p) {
    uint numMirrors;
    uint stride;
    mirrors.GetDimensions(numMirrors, stride);
    int i = 0;
    int depth = 1;
    float3x3 p2w0 = portalToWorld(mirrors[0]);
    float3x3 p2w1 = portalToWorld(mirrors[1]);
    float3x3 w2p0 = transpose(p2w0);
    float3x3 w2p1 = transpose(p2w1);
    while (i < _mirrorDepth) {
        float3 np = p;
        //portal folds go here
        np = portalFold(np, mirrors[0].pos, mirrors[1].pos, p2w0, w2p1);
        np = portalFold(np, mirrors[1].pos, mirrors[0].pos, p2w1, w2p0);
        float3 d = p - np;
        if (d.x == 0 && d.y == 0 && d.z == 0) break;
        p = np;
        i++;
        depth++;
    }

    return p;
}

float3 planeFold(float3 p, float3 n, float3 mpos) {
    p = p - mpos;
    p -= (2 * min(0, dot(p, n)) * n);
    return p + mpos;
}

float3 inFoldedSpace(float3 p) {
    if (!_useMirrors) return p;
    if (mirrorsArePortals) return inPortalSpace(p);
    uint numMirrors;
    uint stride;
    mirrors.GetDimensions(numMirrors, stride);
    int i = 0;
    int depth = 1;
    while (i < _mirrorDepth) {
        float3 np = p;
        for (uint i = 0; i < numMirrors; i++) {
            Mirror m = mirrors[i];
            np = planeFold(np, m.norm, m.pos);
        }
        float3 d = p - np;
        if (d.x == 0 && d.y == 0 && d.z == 0) break;
        p = np;
        i++;
        depth++;
    }
    
    return p;
}

float opSmoothUnion(float d1, float d2, float k) {
    float h = clamp(0.5 + 0.5 * (d2 - d1) / k, 0.0, 1.0);
    return lerp(d2, d1, h) - k * h * (1.0 - h);
}

float opSmoothSubtraction(float d1, float d2, float k) {
    float h = clamp(0.5 - 0.5 * (d2 + d1) / k, 0.0, 1.0);
    return lerp(d2, -d1, h) + k * h * (1.0 - h);
}

float SphereDist(float3 p, float3 c, float r) {
    //p = fmod(p, 10);
    return length(p - c) - r;
}

float FloorDist(float3 p, float y) {
    return p.y - y;
}

float BoxDist(float3 p, float3 c, float3 b, float4 r0, float4 r1, float4 r2)
{
    p -= c;
    float4 p1 = float4(p, 1);
    
    p.x = dot(p1, r0);
    p.y = dot(p1, r1);
    p.z = dot(p1, r2);
    
    float3 q = abs(p) - b;
    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);
}

float GetDistToObject(float3 p, Object o) {
    if (o.type == 0) {
        return FloorDist(p, o.pos.y);
    }
    if (o.type == 1) {
        return SphereDist(p, o.pos, o.dim.x);
    }
    if (o.type == 2) {
        return BoxDist(p, o.pos, o.dim.xyz, o.r0, o.r1, o.r2); 
    }
    return 0; //should never happen
}

float combine(float d, float nd, int t) {
    if (t == 0) {
        return opSmoothUnion(d, nd, 1);
    }
    if (t == 1) {
        return opSmoothSubtraction(nd, d, 1);
        //return max(d, -nd);
    }
    return min(d, nd);
}

float GetDist(float3 p) {
    float3 rawP = p;
    p = inFoldedSpace(p);
    float d = 1e+10;
    uint numStructs;
    uint stride;
    objs.GetDimensions(numStructs, stride);
    for (uint i = 0; i < numStructs; i++) {
        Object o = objs[i];
        float nd = GetDistToObject(p, o);
        d = combine(d, nd, o.combType);
    }
    
    vampireObjs.GetDimensions(numStructs, stride);
    for (uint i = 0; i < numStructs; i++) {
        Object o = vampireObjs[i];
        float nd = GetDistToObject(rawP, o);
        d = combine(d, nd, o.combType);
    }
    
    return d;
}

//returns the index of the hit object, or -1 if no such object exists
int GetHit(float3 p) {
    uint numStructs;
    uint stride;
    objs.GetDimensions(numStructs, stride);
    for (uint i = 0; i < numStructs; i++) {
        Object o = objs[i];
        if (o.type == 1) {
            float nd = SphereDist(p, o.pos, 0.5);
            if (nd < SURF_DIST) {
                return i;
            }
        }
    }
    return -1;
}

float Raymarch(float3 ro, float3 rd) {
    float dO = 0;
    float dS;
    for (int i = 0; i < MAX_STEPS; i++) {
        float3 p = ro + (dO * rd);
        dS = GetDist(p);
        dO += dS;
        if (dS<SURF_DIST || dO>MAX_DIST) break;
    }

    return dO;
}

float3 GetNormal(float3 p) {
    float2 e = float2(1e-2, 0);
    float3 n = GetDist(p) - float3(
        GetDist(p - e.xyy),
        GetDist(p - e.yxy),
        GetDist(p - e.yyx)
        );
    return normalize(n);
}

float GetLight(float3 p) {
    //float3 lightPos = float3(1, 3, 0);
    //float3 l = normalize(lightPos - p);
    float3 l = normalize(_lightDir);
    float3 n = GetNormal(p);
    float dif = clamp(dot(n, l), 0, 1);

    //shadows
    float d = Raymarch(p + n * SURF_DIST * 2, l);
    //if (d < length(lightPos - p)) dif *= .1;
    if (d < MAX_DIST) dif *= .6;
    return max(.1,dif);
}

float4 GetDiscreteColor(float3 p) {
    float dif = GetLight(p);
    int id = GetHit(p);
    if (id == -1) return float4(dif, dif, dif, 1);
    float4 color = objs[id].color;
    color *= dif;
    return color;
}

float4 GetSmartColor(float3 p) {
    float4 c = float4(0,0,0, 1);
    float3 rawP = p;
    p = inFoldedSpace(p);
    float d = p.y;
    float div = 0;
    float dif = GetLight(rawP);
    uint numStructs;
    uint stride;
    objs.GetDimensions(numStructs, stride);
    for (uint i = 0; i < numStructs; i++) {
        Object o = objs[i];
        float nd = GetDistToObject(p, o);
        if (nd < 1) {
            float closeness = clamp(1 - 2*nd, 0, 1);
            c += objs[i].color * closeness;
            div += closeness;
        }
    }

    vampireObjs.GetDimensions(numStructs, stride);
    for (uint i = 0; i < numStructs; i++) {
        Object o = vampireObjs[i];
        float nd = GetDistToObject(rawP, o);
        if (nd < 1) {
            float closeness = clamp(1 - 2 * nd, 0, 1);
            c += vampireObjs[i].color * closeness;
            div += closeness;
        }
    }

    if (div == 0) return float4(1, 1, 1, 1) * dif;
    c /= div;
    c *= dif;
    return c;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint width, height;
    Result.GetDimensions(width, height);

    float2 uv = float2((id.xy + float2(0.5, 0.5)) / float2(width, height) * 2.0f - 1.0f);


    Ray ray = CreateCameraRay(uv);

    float d = Raymarch(ray.ro, ray.rd);
    if (d >= MAX_DIST) {
        Result[id.xy] = float4(ray.rd * 0.5f + 0.5f, 1.0f);
    }
    else {
        float3 p = ray.ro + (ray.rd * d);
        Result[id.xy] = GetSmartColor(p);
    }
}

[numthreads(10,1,1)]
void colDetect(uint3 id : SV_DispatchThreadID) {
    Collider c = bounds[id.x];
    //c.hit = true;
    float d = GetDist(c.pos);
    if (d < SURF_DIST) {
        c.hit = true;
        c.norm = GetNormal(c.pos);
    }
    bounds[id.x] = c;
}
